#!/bin/sh
set -e

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

# Check if any relevant files are staged
FRONTEND_FILES=$(echo "$STAGED_FILES" | grep -E "^frontend/" || true)
BACKEND_FILES=$(echo "$STAGED_FILES" | grep -E "^backend/" || true)

# Function to run checks with error handling
run_check() {
    local check_name="$1"
    local command="$2"
    local dir="$3"
    local original_dir="$PWD"
    
    echo "üîç Running $check_name..."
    cd "$dir" || exit 1
    
    if ! eval $command; then
        echo "‚ùå $check_name failed"
        exit 1
    fi
    
    echo "‚úÖ $check_name passed"
    cd "$original_dir" || exit 1
}

# Only run frontend checks if frontend files are staged
if [ -n "$FRONTEND_FILES" ]; then
    echo "üì¶ Frontend files detected, running checks..."
    run_check "frontend format" "pnpm run format" "frontend"
    run_check "frontend type-check" "pnpm run type-check" "frontend"
    run_check "frontend lint" "pnpm run lint:fix" "frontend"
fi

# Only run backend checks if backend files are staged
if [ -n "$BACKEND_FILES" ]; then
    echo "‚öôÔ∏è Backend files detected, running checks..."
    run_check "backend lint" "pnpm run lint:fix" "backend"
    run_check "backend format" "pnpm run format" "backend"
    run_check "backend type-check" "pnpm run type-check" "backend"
fi

# If no relevant files staged, skip checks
if [ -z "$FRONTEND_FILES" ] && [ -z "$BACKEND_FILES" ]; then
    echo "‚è≠Ô∏è No frontend or backend files staged, skipping checks"
    exit 0
fi

echo "‚úÖ All checks passed successfully!"
