services:
  # Database Service
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crypto_place}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-crypto_place}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    ports:
      - "${FRONTEND_PORT:-3001}:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:5001}
    volumes:
      - ./app/frontend:/app:cached
      - frontend_node_modules:/app/node_modules
    networks:
      - crypto-network
    restart: unless-stopped
    mem_limit: 1g
    cpus: 1.0
    depends_on:
      - backend

  # Backend Service
  backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    ports:
      - "${BACKEND_PORT:-5001}:5001"
    environment:
      - NODE_ENV=development
      - PORT=5001
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@postgres:5432/crypto_place?schema=public}
      - CORS_ORIGIN=http://localhost:${FRONTEND_PORT:-3001}
    volumes:
      - ./app/backend:/app:cached
      - backend_node_modules:/app/node_modules
      - backend_dist:/app/dist
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crypto-network
    restart: unless-stopped
    mem_limit: 2g
    cpus: 2.0

networks:
  crypto-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  frontend_node_modules:
    driver: local
  backend_node_modules:
    driver: local
  backend_dist:
    driver: local
