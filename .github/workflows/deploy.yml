name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: Install dependencies
      run: |
        cd app/${{ matrix.service }}
        pnpm install --no-frozen-lockfile
      
    - name: Run linting
      run: |
        cd app/${{ matrix.service }}
        pnpm run lint
        
    - name: Run type checking (if applicable)
      run: |
        cd app/${{ matrix.service }}
        if [ -f "tsconfig.json" ]; then
          pnpm run type-check || true
        fi
        
    - name: Run tests
      run: |
        cd app/${{ matrix.service }}
        pnpm run test
        
    - name: Run E2E tests (frontend only)
      if: matrix.service == 'frontend'
      run: |
        cd app/${{ matrix.service }}
        pnpm run test:e2e || true

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
      
    - name: Install dependencies
      run: |
        cd app/frontend
        pnpm install --no-frozen-lockfile
        cd ../backend
        pnpm install --no-frozen-lockfile
        
    - name: Run security audit
      run: |
        cd app/frontend
        pnpm audit --audit-level high || echo "Frontend audit completed with warnings"
        cd ../backend
        pnpm audit --audit-level high || echo "Backend audit completed with warnings"

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: Build Frontend
      run: |
        cd app/frontend
        pnpm install --no-frozen-lockfile
        pnpm run build
        
    - name: Build Backend
      run: |
        cd app/backend
        pnpm install --no-frozen-lockfile
        pnpm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          app/frontend/dist
          app/backend/dist

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Check Docker secrets
      run: |
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "DOCKER_USERNAME is not set"
          echo "SKIP_DOCKER=true" >> $GITHUB_ENV
        else
          echo "DOCKER_USERNAME is set"
          echo "SKIP_DOCKER=false" >> $GITHUB_ENV
        fi
        
    - name: Login to Docker Hub
      if: env.SKIP_DOCKER == 'false'
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Frontend image
      if: env.SKIP_DOCKER == 'false'
      uses: docker/build-push-action@v5
      with:
        context: ./app/frontend
        file: ./app/frontend/Dockerfile.prod
        push: true
        tags: |
          johnny23511/crypto-place-frontend:latest
          johnny23511/crypto-place-frontend:${{ github.sha }}
          
    - name: Build and push Backend image
      if: env.SKIP_DOCKER == 'false'
      uses: docker/build-push-action@v5
      with:
        context: ./app/backend
        push: true
        tags: |
          johnny23511/crypto-place-backend:latest
          johnny23511/crypto-place-backend:${{ github.sha }}
          
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production..."
        # 這裡可以添加你的部署腳本
        # 例如：SSH 到服務器，更新 Docker 容器等
        echo "✅ Deployment completed!"
        
    - name: Health check
      run: |
        echo "🔍 Running health checks..."
        if [ -n "${{ secrets.FRONTEND_URL }}" ] && [ -n "${{ secrets.BACKEND_URL }}" ]; then
          echo "Production URLs configured, running health checks..."
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh ${{ secrets.FRONTEND_URL }} ${{ secrets.BACKEND_URL }}
          echo "✅ Health checks passed!"
        else
          echo "Production URLs not configured, skipping health checks"
          echo "✅ Deployment completed without health checks"
        fi