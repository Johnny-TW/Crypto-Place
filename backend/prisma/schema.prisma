generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
  engineType    = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  name          String?
  password      String
  role          Role        @default(USER)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emplId        String?
  enName        String?
  chName        String?
  jobTitle      String?
  phone         String?
  office        String?
  deptId        String?
  deptDescr     String?
  supvEmplId    String?
  site          String?
  emplCategoryA String?
  bg            String?
  fnLvl1        String?
  fnLvl2        String?
  deptRoleName  String?
  deptRoleAbbr  String?
  Post          Post[]
  Watchlist     Watchlist[]
}

model Crypto {
  id             String   @id
  symbol         String
  name           String
  image          String?
  currentPrice   Float?
  marketCap      Float?
  volume24h      Float?
  priceChange24h Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Watchlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  coinId    String
  coinName  String
  symbol    String
  image     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, coinId])
  @@map("watchlists")
}

enum Role {
  USER
  ADMIN
}
