services:
  # Database Service
  postgres:
    image: postgres:15-alpine
    env_file:
      - .env.qas
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crypto_place_qas}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_qas_data:/var/lib/postgresql/data
    networks:
      - crypto-network-qas
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-crypto_place_qas}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Frontend Service (QAS)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-qas}
    ports:
      - "${FRONTEND_PORT:-3001}:5173"
    env_file:
      - .env.qas
    networks:
      - crypto-network-qas
    restart: unless-stopped
    mem_limit: 1g
    cpus: 1.0
    depends_on:
      - backend

  # Backend Service (QAS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-qas}
    ports:
      - "${BACKEND_PORT:-5001}:5001"
    env_file:
      - .env.qas
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crypto-network-qas
    restart: unless-stopped
    mem_limit: 2g
    cpus: 2.0

networks:
  crypto-network-qas:
    driver: bridge

volumes:
  postgres_qas_data:
    driver: local
